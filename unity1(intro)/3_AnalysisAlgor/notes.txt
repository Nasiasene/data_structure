+ Análise de Algoritmos:
  - Podemos escolher um algoritmo através do tempo de execução e a quantidade de memória consumida.
  - Analisar o número de vezes que as operações são executadas é a forma mais indicada de ver se um código esta bem otimizado ou não.

  - Análise de complexidade feita em função de n, ou seja, f(n), sendo n o tamanho da entrada (ex: linhas de uma matriz).
  - Se um código tem um laço de repetição que itera uma lista de tamanho n a complexidade dele é f(n)=n, pois irá iterá-lo n vezes.
  - Para valores suficientemente pequenos de n, a maioria dos algoritmos custa pouco para ser executado.

+ Notação Assintótica:
  - Estuda o crescimento do tempo de execução a medida que o tamanho da entrada (n) cresce.

  +- Big-O:
    - utilizada para representar a complexidade computacional de um algoritmo.
    - Um algoritmo O(n) é melhor do que um O(n**2)
    - Definimos g(n) = O(f(n)) se f(n) domina assintoticamente g(n) f(n) cresce mais rápido do que g(n).
      e.g: Se T(n)=(n+1)2... então --> O(n2).
    - O(1) < O(log(n)) < O(n) < O(n*log(n)) < O(n**2) < O(2**n) < O(n!).
      obs: Quanto menor, melhor.

    - Instruções simples (atribuição, comparação, operação aritmética, acesso a memória): O(1)
    - Sequência de instruções:
        Maior tempo de execução das instruções;
    - Estrutura de decisão (condicional):  O(1)
    - Estrutura de Repetição:
        Tempo pra testar a condição de parada: O(1) +
        Tempo de execução dos comandos * no de iterações. 
    
    Exemplos: 
    int soma(int n){
      int i, acumulador = 0;      //1
      for (i=0; i<n; i++){        //n vezes
        acumulador += 1;          //n vezes
      }
      return acumulador;          //1
    }

    *Ou seja f(n) = 2n + 2  --->  O(n)*


    void exemplo(int n){
      int i, j, a=0;             //1
      for (i=0; i < n; i++){     //n
        for (j=n; j > i; j++){   //n * (n+1)
          a += i + j;            //n * (n+1)
        }
      }
      return(n)                  //1
    }

    *Ou seja f(n) = 2n**2 + 3n + 2  --->  O(n**2)*


    void exemplo2(int n){
      int i, j, k;                              //Declaração = 0, atribuição = 1. Logo: 0
      for (i=0; i < n; i++){                    //n
        for (j=0; j < n; j++){                  //n*n
          C[i][j] = 0;                          //n*n
          for (k=n-1; k >= 0; k--){             //n*n*n
            C[i][j] += A[i][k] * B[k][j];       //n*n*n
          }
        }
      }
    } 

    *Ou seja f(n)=2n**3 + 2n**2 + n  --->  O(n**3)*